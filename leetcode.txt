問題: 從一個無序的array當中找到第K大(小)的元素

215.找出第K大的元素

1.sort 方法
TC = O nlogn
SC = O n

2. min heap
TC = O nlogK 
SC = O K

3. Quickselect (Hoare's selection algorithm)
TC = O(n)
SC = O(n)

因為其平均TC是O(n)，所以才特別重要的演算法，公認最好的演算法。


問題: 將一個無序的array排序完成，最好的演算法?

Timsort = merge sort + insert sort

TC = O (nlogn) <= worst-case,一般排序演算法的平均
     O (nlogn) <= average-case
   = O (n)     <= base-case 很猛
		  若array越接近排序好(或者說某線段有序)
		python使用其的原因也是因為這個O(n)，因為作者相信自然界中的數據幾乎都是有序的，意思是很難全隨機或全一樣
SC = O (n)     <= 最壞情況下臨時空間需要2/n，一般情況下只需要一個很小的臨時空間
特性:   stable、最壞不會比一般算法差，但最好可以到很好，平均又偏向好。
優化:   改進的點在於優化merge sort的比較邏輯，不再需要一一比較每次都要花O(n)時間，使用名為Gallop(馳騁)的技術
        馳騁=倍增搜尋法(exponential search)，找到介於(2^(k)-1)與(2^(k-1)-1)的範圍後，再使用BS找到精確位置，使原本
	O(n)的比較次數降低為O(logn)
		  